version: '3.8'
services:
  nginx-proxy:
    build:
      context: ./dockerfiles
      dockerfile: nginx-proxy.Dockerfile
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /etc/nginx/certs
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
    networks:
      - extern
      - nginx

  # acme-companion:
  #   image: nginxproxy/acme-companion
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /etc/acme.sh
  #   volumes_from:
  #     - nginx-proxy:rw
  #   env_file: .env
  #  depends_on:
  #    - nginx-proxy
  #  networks:
  #    - nginx

  odoo:
    #build: .
    image: odoo:16.0
    container_name: odoo
    restart: unless-stopped
    #ports:
      #- 8069:8069
    volumes:
      - odoo:/var/lib/odoo
      - ./config/odoo.conf:/etc/odoo/odoo.conf
      - ./addons:/mnt/extra-addons
      #- ./backups:/var/lib/odoo/backups
    env_file: .env
    environment:
      - VIRTUAL_PORT=8069
      - VIRTUAL_HOST=${ODOO_ENDPOINT}
      #- LETSENCRYPT_HOST=${ODOO_ENDPOINT}
      #- ODOO_COMMAND= --update all --stop-after-init
    depends_on:
      - postgres
    networks:
      - extern
      - postgres
      - prometheus
    
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    #ports:
      #- 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data/pgdata
    env_file: .env
    networks:
      - postgres

  ## Backup
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    #ports:
      #- 9000:9000
      #- 9001:9001
    volumes:
      - minio:/data
    env_file: .env
    environment:
      - VIRTUAL_PORT=9000
      - VIRTUAL_HOST=${MINIO_ENDPOINT}
      #- LETSENCRYPT_HOST=${MINIO_ENDPOINT}
    command: server /data --console-address ":9001"
    networks:
      - extern
      - minio
      - prometheus

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb minio/bucket;
      exit 0;
      "
    depends_on:
      - minio
    networks:
      - minio

  ## Metrics Monitoring
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    #ports:
      #- 3000:3000
    volumes:
      - grafana:/var/lib/grafana
    env_file: .env
    environment:
      - VIRTUAL_PORT=3000
      - VIRTUAL_HOST=${GRAFANA_ENDPOINT}
      #- LETSENCRYPT_HOST=${GRAFANA_ENDPOINT}
    networks:
      - extern
      - grafana

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    #ports:
      #- 9090:9090
    volumes:
      - prometheus:/prometheus
      - ./config/prometheus-config.yml:/etc/prometheus/prometheus-config.yml
      - ./config/alert-rules.yml:/etc/prometheus/alert-rules.yml
    command: '--config.file=/etc/prometheus/prometheus-config.yml'
    networks:
      - grafana
      - prometheus
      - alertmanager

  node-exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node-exporter
    restart: unless-stopped
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    command: '--path.rootfs=/host'
    networks:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: cadvisor
    restart: unless-stopped
    #ports:
      #- 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - prometheus

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx-exporter
    restart: unless-stopped
    #ports:
    #  - 9113:9113
    command: -nginx.scrape-uri=http://nginx-proxy:8080/nginx_status
    depends_on:
      - nginx-proxy
    networks:
      - nginx
      - prometheus

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    restart: unless-stopped
    #ports:
      #- 9187:9187
    env_file: .env
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - postgres
      - prometheus

  ## Logs Monitoring
  loki:
    image: grafana/loki
    container_name: loki
    restart: unless-stopped
    ports:
      - 3100:3100
    volumes:
      - loki:/etc/loki
      - ./config/loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - grafana
      - loki

  promtail:
    image: grafana/promtail
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - promtail:/etc/promtail
      - ./config/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - loki

  ## Alerts
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    restart: unless-stopped
    #ports:
      #- 9093:9093
    volumes:
      - alertmanager:/data
      - ./config/alertmanager-config.yml:/etc/alertmanager/alertmanager-config.yml
    command: --config.file=/etc/alertmanager/alertmanager-config.yml --log.level=debug
    networks:
      - grafana
      - alertmanager

networks:
  extern:
  nginx:
  postgres:
  minio:
  grafana:
  prometheus:
  loki:
  alertmanager:

volumes:
  odoo:
  postgres:
  minio:
  grafana:
  prometheus:
  loki:
  promtail:
  alertmanager:
